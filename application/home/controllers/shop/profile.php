<?php

/**
 * Created by PhpStorm.
 * User: BestLala
 * Date: 3/1/2017
 * Time: 9:26 PM
 */
class profile extends Shop_Controller
{
    function __construct()
    {
        parent::__construct();

        $this->load->model("user_model","user");
        $this->load->model("shopdbreader_model","shopdbreader");

    }

    function index()
    {
        $this->layout->view("shop/profile/index",array());
    }

    function userInfo()
    {
        $data = array("success"=>true);
        try{
            if(!$this->is_post())
            {
                $data["success"]=false;
                $data["message"]="操作无效!";
            }else{
                $d = $_POST;

                $n = $this->user->changeUserInfo(MyAuth::getCurrentUser()->id, $d);
                $data["message"]="更改成功!";

                MyAuth::setLoginUser($n);
            }
        }
        catch (Exception $e){
            $data["message"]=$e->getMessage();
            $data["success"]=false;
        }

        echo json_encode($data);
    }

    function createRequirement()
    {
        $data = array("success"=>true);
        if(!$this->is_post())
        {
            $data["success"]=false;
            $data["message"]="操作无效!";
        }else{
            $this->load->model("requirement_model","requirement");
            $d = $_POST;

            $n = $this->requirement->save(MyAuth::getCurrentUser()->id, $d);
            $data["message"]="添加成功!!";
        }

        echo json_encode($data);
    }
    function deleteRequirement()
    {
        $data = array("success"=>true);
        if(!$this->is_post())
        {
            $data["success"]=false;
            $data["message"]="操作无效!";
        }else{
            try{
                $this->load->model("requirement_model","requirement");
                $d = $_POST;

                $n = $this->requirement->delete(MyAuth::getCurrentUser()->id, $d);
            }catch (Exception $e)
            {
                $data["message"]=$e->getMessage();
            }
        }

        echo json_encode($data);
    }

    function createQuestion()
    {
        $data = array("success"=>true);
        if(!$this->is_post())
        {
            $data["success"]=false;
            $data["message"]="操作无效!";
        }else{
            $this->load->model("question_model","question");
            $d = $_POST;

            $n = $this->question->create(MyAuth::getCurrentUser()->id, $d);
            $data["message"]="添加成功!!";
        }

        echo json_encode($data);
    }

    function getRequirements()
    {
        $pageIndex=1;
        $pageSize=16;
        if(array_key_exists("pageIndex",$_GET))
        {
            $pageIndex = $_GET["pageIndex"]+0;
        }
        if(array_key_exists("pageSize",$_GET))
        {
            $pageSize = $_GET["pageSize"]+0;
        }

        $data = $this->shopdbreader->getProfileRequirements(MyAuth::getCurrentUser()->id,$pageIndex,$pageSize);

        echo json_encode($data);
    }

    function getWishList()
    {
        $pageIndex=1;
        $pageSize=16;
        if(array_key_exists("pageIndex",$_GET))
        {
            $pageIndex = $_GET["pageIndex"]+0;
        }
        if(array_key_exists("pageSize",$_GET))
        {
            $pageSize = $_GET["pageSize"]+0;
        }

        $data = $this->shopdbreader->getProfileWishlist(MyAuth::getCurrentUser()->id,$pageIndex,$pageSize);

        echo json_encode($data);
    }

    function getShoppingCarts()
    {
        $data = $this->shopdbreader->getProfileShoppingCarts(MyAuth::getCurrentUser()->id);

        echo json_encode($data);
    }

    function getQuestions()
    {
        $pageIndex=1;
        $pageSize=16;
        if(array_key_exists("pageIndex",$_GET))
        {
            $pageIndex = $_GET["pageIndex"]+0;
        }
        if(array_key_exists("pageSize",$_GET))
        {
            $pageSize = $_GET["pageSize"]+0;
        }

        $data = $this->shopdbreader->getProfileQuestions(MyAuth::getCurrentUser()->id,$pageIndex,$pageSize);

        echo json_encode($data);
    }

    function getMessages()
    {
        $pageIndex=1;
        $pageSize=16;
        if(array_key_exists("pageIndex",$_GET))
        {
            $pageIndex = $_GET["pageIndex"]+0;
        }
        if(array_key_exists("pageSize",$_GET))
        {
            $pageSize = $_GET["pageSize"]+0;
        }

        $data = $this->shopdbreader->getProfileMessages(MyAuth::getCurrentUser()->id,$pageIndex,$pageSize);

        echo json_encode($data);
    }

    function loadResources()
    {
        parent::loadResources(); // TODO: Change the autogenerated stub
        //upload files
        $this->layout->js(base_url("/assets/media/js/jquery.iframe-transport.js"));
        $this->layout->js(base_url("/assets/media/js/jquery.fileupload.js"));
        $this->layout->js(base_url("/assets/media/js/bootstrap-colorpicker.js"));
        $this->layout->js(base_url("/assets/media/js/bootstrap-datepicker.js"));
        $this->layout->js(base_url("/assets/media/js/select2.min.js"));
        $this->layout->js(base_url("/assets/script/ckeditor/ckeditor.js"));
        $this->layout->js(base_url("/assets/script/ckeditor/initializeEditor.js"));

        $this->layout->css(base_url("/assets/media/css/colorpicker.css"));
        $this->layout->css(base_url("/assets/media/css/datepicker.css"));
        $this->layout->css(base_url("/assets/media/css/datetimepicker.css"));
        $this->layout->css(base_url("/assets/media/css/select2_metro.css"));
    }

    function getModals()
    {
        $this->load->model("modal_model","modal");
        $pageIndex=1;
        $pageSize=16;
        if(array_key_exists("pageIndex",$_GET))
        {
            $pageIndex = $_GET["pageIndex"]+0;
        }
        if(array_key_exists("pageSize",$_GET))
        {
            $pageSize = $_GET["pageSize"]+0;
        }

        $data = $this->shopdbreader->getProfileModals(MyAuth::getCurrentUser()->email,$pageIndex,$pageSize);

        echo json_encode($data);
    }

    function getOrders()
    {
        $this->load->model("order_model","order");
        $pageIndex=1;
        $pageSize=16;
        if(array_key_exists("pageIndex",$_GET))
        {
            $pageIndex = $_GET["pageIndex"]+0;
        }
        if(array_key_exists("pageSize",$_GET))
        {
            $pageSize = $_GET["pageSize"]+0;
        }

        $data = $this->order->getAll(MyAuth::getCurrentUser()->id,$pageIndex,$pageSize);

        echo json_encode($data);
    }

    function getOrderItems($number){
        $this->load->model("order_model","order");
        $data = $this->order->getOrderItems(MyAuth::getCurrentUser()->id,$number);

        echo json_encode(array("success"=>true,"data"=>$data));
    }

    function modaldetail($id="")
    {
        $this->load->helper("form");
        $this->load->model("shopdbreader_model","shopdbreader");
        $this->load->model("modal_model","modal");

        $data=$this->input->post();
        $data =$this->initialize($data);
        if($this->is_post())
        {
            if($this->form_validation->run()==TRUE)
            {
                $data["operatorUserName"]=MyAuth::getCurrentUser()->email;
                $data["operatorName"]=MyAuth::getCurrentUser()->shippingName;
                try {
                    $data = $this->processUploadedAttachment($data);

                    $this->modal->save($data);

                    redirect(site_url("shop/profile/index#modals"));
                    return;
                }
                catch (Exception $e)
                {
                    $data["uniqueError"]=$e->getMessage();
                }
            }
        }else
        {
            $data["id"]=$id;

            if(!empty($id))
            {
                $result=$this->modal->get($id);
                if($result==null || !isset($result))
                {
                    redirect(site_url("modal/index"));
                    return;
                }

                $data=$result;
            }
        }

        $data["tag_list"]=$this->loadModalTagsData();
        $data["meterial_list"]= $this->loadmodalMeterialsData();
        $data["category_list"]= $this->loadmodalCategoriesData();
        $this->layout->view("shop/profile/modaldetail",$data);
    }

    public function modaldelete()
    {
        $data = array("success"=>true);
        if(!$this->is_post())
        {
            $data["success"]=false;
            $data["message"]="操作无效!";
        }else{
            try{
                $d = $_POST;
                $this->load->model("modal_model","modal");
                $this->modal->delete(MyAuth::getCurrentUser()->email, $d);
            }catch (Exception $e)
            {
                $data["message"]=$e->getMessage();
            }
        }

        echo json_encode($data);
    }

    private function initialize($data){
        $this->load->library("form_validation");
        $this->form_validation->set_rules("name","名称","required");
        $this->form_validation->set_rules("keyword","关键字","required");
        $this->form_validation->set_rules("category_id","类别","required");
        $this->form_validation->set_rules("attachment","附件","required");
        $this->form_validation->set_rules("introducation","简介","required");

        if(!isset($data["name"]))
        {
            $data["name"]="";
        }
        if(!isset($data["keyword"]))
        {
            $data["keyword"]="";
        }
        if(!isset($data["isPublished"]))
        {
            $data["isPublished"]=false;
        }

        if(!isset($data["description"]))
        {
            $data["description"]="";
        }
        if(!isset($data["publishedDateFrom"]))
        {
            $data["publishedDateFrom"]="";
        }
        if(!isset($data["publishedDateTo"]))
        {
            $data["publishedDateTo"]="";
        }
        if(!isset($data["tags"]))
        {
            $data["tags"]=array();
        }
        if(!isset($data["meterials"]))
        {
            $data["meterials"]=array();
        }
        if(!isset($data["image"]))
        {
            $data["image"]="";
        }
        if(!isset($data["thumbImage"]))
        {
            $data["thumbImage"]="";
        }
        if(!isset($data["smallImage"]))
        {
            $data["smallImage"]="";
        }
        if(!isset($data["attachment"]))
        {
            $data["attachment"]="";
        }
        if(!isset($data["attachmentSize"]))
        {
            $data["attachmentSize"]="";
        }
        if(!isset($data["isDownloadable"]))
        {
            $data["isDownloadable"]="";
        }
        if(!isset($data["category_id"]))
        {
            $data["category_id"]="";
        }
        if(!isset($data["shownImages"]))
        {
            $data["shownImages"]=array();
        }
        if(!isset($data["shownType"]))
        {
            $data["shownType"]="html";
        }
        if(!isset($data["shownVedio"]))
        {
            $data["shownVedio"]="";
        }
        if(!isset($data["introducation"]))
        {
            $data["introducation"]="";
        }
        if(!isset($data["shownDescription"]))
        {
            $data["shownDescription"]="";
        }
        return $data;
    }

    private function loadModalTagsData()
    {
        $modalTags = $this->shopdbreader->getmodalTagOptions();

        $data=array();
        foreach($modalTags as $item )
        {
            $data[$item->id]=$item->name;
        }

        return $data;
    }

    private function loadmodalMeterialsData()
    {
        $modalMeterials = $this->shopdbreader->getmodalMeterialOptions();

        $data=array();
        foreach($modalMeterials as $item )
        {
            $data[$item->id]=$item->name;
        }

        return $data;
    }

    private function loadmodalCategoriesData()
    {
        $modalCategories = $this->shopdbreader->getmodalCategoryOptions();

        $data=array(""=>"请选择类别");
        foreach($modalCategories as $item )
        {
            $data[$item->id]=$item->name;
        }

        return $data;
    }

    private function processUploadedAttachment($data)
    {
        $this->load->library("upload");
        $relativePath = "assets/uploads/attachments";

        $config=array("upload_path"=>$relativePath,"overwrite"=>FALSE,"allowed_types"=>"*");
        $this->upload->initialize($config);

        if($this->upload->do_upload("newattachment"))
        {
            $d = $this->upload->data();
            $data["attachment"]=("/".$relativePath."/".$d["client_name"]);
            $data["attachmentSize"]=$d["file_size"];
        }

        return $data;
    }
}